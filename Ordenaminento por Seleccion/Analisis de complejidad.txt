Complejidad
Mejor Caso (Best Case)
El mejor caso ocurre cuando la lista ya est치 ordenada. Sin embargo, Selection Sort sigue recorriendo toda la lista y realizando comparaciones, aunque no realice intercambios.

Complejidad: 
洧녝(洧녵^2)

Peor Caso (Worst Case)
El peor caso ocurre cuando la lista est치 en orden inverso. Selection Sort realiza el mismo n칰mero de comparaciones en todos los casos, pero en este escenario tambi칠n realiza el m치ximo n칰mero de intercambios.

Complejidad: 洧녝(洧녵^2)


Caso Promedio (Average Case)
El caso promedio ocurre cuando los elementos est치n en un orden aleatorio. Selection Sort siempre realiza el mismo n칰mero de comparaciones sin importar el orden inicial.

Complejidad:洧녝(洧녵)

C치lculo por l칤nea
def selection_sort(arr):
    n = len(arr)                                                      # Complejidad: O(1)
    for i in range(n):                                                # Complejidad: O(n)
        min_idx = i                                                   # Complejidad: O(n)
        for j in range(i + 1, n):                                     # Complejidad: O(n^2)
            if arr[j] < arr[min_idx]:                                 # Complejidad: O(n^2)
                min_idx = j                                           # Complejidad: O(n^2)
        arr[i], arr[min_idx] = arr[min_idx], arr[i]                   # Complejidad: O(n)
Total:

洧녝(1)+洧녝(洧녵)+洧녝(洧녵^2)+洧녝(洧녵^2)+洧녝(洧녵^2)+洧녝(洧녵)=洧녝(洧녵^2)

Por lo tanto, la complejidad del algoritmo Selection Sort es:
洧녝(洧녵^2)
en todos los casos.