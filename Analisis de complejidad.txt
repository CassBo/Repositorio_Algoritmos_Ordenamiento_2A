Complejidad
Mejor Caso (Best Case)
Es el escenario más favorable para el algoritmo. Para Insertion Sort, esto ocurre cuando la lista ya está ordenada. En este caso, el algoritmo solo necesita recorrer la lista sin realizar movimientos innecesarios.

Complejidad: 
𝑂(𝑛)

def insertion_sort(arr):
    for j in range(1, len(arr)):  # Se ejecuta (n - 1) veces
        key = arr[j]              # Se ejecuta (n - 1) veces
        i = j - 1                 # Se ejecuta (n - 1) veces
        while i >= 0 and arr[i] > key:  # En el mejor caso, nunca se ejecuta (0)
            arr[i + 1] = arr[i]         # No ocurre en el best case: (0)
            i -= 1                      # No ocurre en el best case: (0)
        arr[i + 1] = key  # Se ejecuta (n - 1) veces

𝑇(𝑛)=𝑐1(𝑛−1)+𝑐2(𝑛−1)+𝑐3(𝑛−1)+𝑐7(𝑛−1)=𝑂(𝑛)

Peor Caso (Worst Case)
Es el escenario menos favorable. Para Insertion Sort, esto ocurre cuando la lista está ordenada en orden inverso. En este caso, el algoritmo necesita mover cada elemento hasta la primera posición, lo que implica el máximo número de comparaciones y desplazamientos.

Complejidad: 
𝑂(𝑛2)

def insertion_sort(arr):
    for j in range(1, len(arr)):  # Se ejecuta (n-1) veces
        key = arr[j]              # Se ejecuta (n-1) veces
        i = j - 1                 # Se ejecuta (n-1) veces
        while i >= 0 and arr[i] > key:  # Se ejecuta n * (n-1) veces
            arr[i + 1] = arr[i]         # Se ejecuta n * (n - 1) veces
            i -= 1                      # Se ejecuta n * (n - 1) veces
        arr[i + 1] = key  # Se ejecuta (n - 1) veces

𝑇(𝑛)=𝑐1(𝑛−1)+𝑐2(𝑛−1)+𝑐3(𝑛−1)+𝑐4,5,6(𝑛(𝑛−1))+𝑐7(𝑛−1)
𝑇(𝑛)=𝑂(𝑛2)

Caso Promedio (Average Case)
Es el escenario típico que se espera en la mayoría de las ejecuciones. Para Insertion Sort, se asume que los elementos están en un orden aleatorio. En este caso, la cantidad de comparaciones y movimientos sigue siendo cuadrática en promedio.

Complejidad: 
𝑂(𝑛2)

def insertion_sort(arr):
    for j in range(1, len(arr)):  # Se ejecuta (n-1) veces
        key = arr[j]              # Se ejecuta (n-1) veces
        i = j - 1                 # Se ejecuta (n-1) veces
        while i >= 0 and arr[i] > key:  # Se ejecuta en promedio, n/2 veces
            arr[i + 1] = arr[i]         # Se ejecuta, en promedio, n/2 veces
            i -= 1
        arr[i + 1] = key  # Se ejecuta (n-1) veces
    
𝑇(𝑛)=𝑐1(𝑛−1)+𝑐2(𝑛−1)+𝑐3(𝑛−1)+𝑐4,5,6(𝑛2(𝑛−1)+𝑐7(𝑛−1)
𝑇(𝑛)=𝑛2(𝑛−1)=𝑛2−𝑛2=𝑂(𝑛2)


